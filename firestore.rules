service cloud.firestore {
  match /databases/{database}/documents {

    match /Case/{caseId} {
      allow read: if isSignedIn() && companyUserIsActive(companyIdFromCaseId()) && (isAdminOrStaffUser(companyIdFromCaseId()) || (isDoctorUser(companyIdFromCaseId()) && isSameDoctorForCase()))
      allow create: if isSignedIn() && companyUserIsActive(companyIdFromCaseId()) && (isAdminOrStaffUser(companyIdFromCaseId()) || (isDoctorUser(companyIdFromCaseId()) && isSameDoctorForCase()))
      allow update: if isSignedIn() && companyUserIsActive(companyIdFromCaseId()) && (isAdminOrStaffUser(companyIdFromCaseId()) || (isDoctorUser(companyIdFromCaseId()) && isSameDoctorForCase()))
      /// we do not currently support deleting a case ///
      allow delete: if false
    }

    match /CompanyAuthUserJoin/{companyAuthUserJoinId} {
      allow read: if isSignedIn() && requestingUserIsOnCompanyAuthUserJoin()
      /// we only allow writes from the create user / sign up cloud functions ///
      allow write: if false
    }

    match /Company/{companyId} {
      /// all of interaction with companies occurs in cloud functions ///
      allow read: if isSignedIn() && companyUserIsActive(companyId)
      allow write: if false
    }

    match /CompanyUser/{companyUserId} {
      allow get: if isSignedIn() && companyUserIsActive(companyIdFromQueriedUser()) && (isAdminUser(companyIdFromQueriedUser()) || isSameUser())
      allow list: if isSignedIn() && companyUserIsActive(companyIdFromQueriedUser()) && isAdminUser(companyIdFromQueriedUser())
      /// User can only be created and updated through cloud functions. ///
      allow create: if false
      allow update: if false
      /// Users cannot be deleted in our system. Instead, they are set as inactive.
      allow delete: if false
    }

    match /WorkflowCheckpoint/{workflowCheckpointId} {
      allow read: if isSignedIn() && companyUserIsActive(companyIdFromWorkflowCheckpoint())
      allow create: if isSignedIn() && companyUserIsActive(companyIdFromIncomingData()) && isAdminUser(companyIdFromIncomingData())
      allow update: if isSignedIn() && companyUserIsActive(companyIdFromWorkflowCheckpoint()) && isAdminUser(companyIdFromWorkflowCheckpoint())
      /// Workflow checkpoints cannot be deleted in our system because they may correspond to case checkpoints.
      allow delete: if false
    }

    match /CompanyWorkflow/{companyWorkflowId} {
      allow read: if isSignedIn() && companyUserIsActive(companyIdFromCompanyWorkflow())
      allow write: if isSignedIn() && companyUserIsActive(companyIdFromCompanyWorkflow()) && isAdminUser(companyIdFromCompanyWorkflow())
    }

    match /PrescriptionTemplate/{prescriptionTemplateId} {
      allow read: if isSignedIn() && companyUserIsActive(companyIdFromPrescriptionTemplate())
      allow create: if isSignedIn() && companyUserIsActive(companyIdFromIncomingData()) && isAdminUser(companyIdFromIncomingData())
      allow delete: if false
      allow update: if isSignedIn() && companyUserIsActive(companyIdFromIncomingData()) && isAdminUser(companyIdFromIncomingData())
    }

    /// Functions ///

    function existingData() {
      return resource.data
    }

    function requestingUserIsOnCompanyAuthUserJoin() {
      return existingData().authUserId == authUserId()
    }

    function companyIdFromIncomingData() {
      return incomingData().companyId
    }

    function incomingData() {
      return request.resource.data
    }

    function isSignedIn() {
      return request.auth != null
    }

    function authUserId() {
      return request.auth.uid
    }

    function isNotDeactivatingOwnUser() {
      return !isameUser() || !isDeactivatingUser()
    }

    function isNotChangingRoleOnOnlyAdmin() {
      return !isSameUser() || !isChangingUserRole()
    }

    function isSameUser() {
      return existingData().authUserId == authUserId()
    }

    function isDeactivatingUser() {
      return existingData().isActive && !incomingData().isActive
    }

    function isChangingUserRole() {
      return existingData().type != incomingData().type
    }

    function companyIdFromCaseId() {
      return existingData().companyId
    }

    function companyIdFromQueriedUser() {
      return existingData().companyId
    }

    function companyIdFromWorkflowCheckpoint() {
      return existingData().companyId
    }

    function companyIdFromCompanyWorkflow() {
      return existingData().companyId
    }

    function companyIdFromPrescriptionTemplate() {
      return existingData().companyId
    }

    function isSameDoctorForCase() {
      return existingData().doctor == companyUserIdFromCompanyId(companyIdFromCaseId())
    }

    function companyIdUidString(companyId) {
      return companyId + '_' + authUserId()
    }

    function companyAuthUserJoinFromCompanyIdExists(companyId) {
      return exists(/databases/$(database)/documents/CompanyAuthUserJoin/$(companyIdUidString(companyId)))
    }

    function companyUserIdFromCompanyId(companyId) {
      return get(/databases/$(database)/documents/CompanyAuthUserJoin/$(companyIdUidString(companyId))).data.companyUserId
    }

    function companyUserFromCompanyUserId(companyUserId) {
      return get(/databases/$(database)/documents/CompanyUser/$(companyUserId)).data
    }

    function isAdminOrStaffUser(companyId) {
      return isAdminUser(companyId) || isStaffUser(companyId)
    }

    function companyUserIsActive(companyId) {
      return companyAuthUserJoinFromCompanyIdExists(companyId) && companyUserFromCompanyUserId(companyUserIdFromCompanyId(companyId)).isActive
    }

    function isAdminUser(companyId) {
      return companyUserFromCompanyUserId(companyUserIdFromCompanyId(companyId)).type == 'Admin'
    }

    function isStaffUser(companyId) {
      return companyUserFromCompanyUserId(companyUserIdFromCompanyId(companyId)).type == 'Staff'
    }

    function isDoctorUser(companyId) {
      return companyUserFromCompanyUserId(companyUserIdFromCompanyId(companyId)).type == 'Doctor'
    }
  }
}
